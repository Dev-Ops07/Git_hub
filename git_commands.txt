-------git commends----------
# initiating git local repository

---> git init

# to Know the status

---> git status

# adding working tree to staging area then it creates index or history

---> git add .

---> git add -A

---> git add -u

# configuration of user and email

---> git config --global user.name '<username>'
---> git config --global user.email '<email@gmail.com>'

# listing the configuration 

---> git config --list

# adding staging area to local repository

---> git commit -m "<commitig message>"

# listing the commit logs

---> git log

# get back data from staging area to working tree

---> git reset <filename>

---> git restore --staged <file name>

# removing changes on working tree

---> git restore <filename>

# removing all untracked files from working tree

---> git clean -fd

# removing from staging and working tree

---> git reset --hard

# short the log data using

---> git log --oneline

# listing the branch

---> git branch

# creat a branch 

---> git branch <branch name>

# move the head to specific commit 

---> git checkout <cid>

# switch the branches

---> git checkout <branch name>

---> git checkout -b <branch name>

# merge commits of one branch to other branch
# switch to destination branch 

---> git merge <name of source branch>

# rebase to form a linear commits
# switch to destination barnch

---> git rebase <source branch name>

# To know the difference between two branches or commits

---> git diff <cid1> <cid2>

---> git diff <branch1> <branch2>

# to know the commited details 

---> git cat-file -p <cid>

# to know the type of cid 

---> git cat-file -t <cid>

# to know the remote branch 

---> git remote

# adding remote repository to local repository

---> git remote add <remote default branch > <url>

# transfer data to remote repo

---> git push <remote branch> <destnation branch>

# cloning the data from remote to local repo

---> git clone <url>

# to get a bare repo from remote 
# we are getting only .git folder

---> git  clone --bare <url>

# getting data from remote repo
# pull the data mean fetch+merge
# before using push we should use pull to avoid merge conflicts

---> git  pull

# using stash to create temporary 5th area in working tree
# create stash to transfer data to temporary area

---> git stash

---> git stash save "<message about stash>"

# to View the stash list 

---> git stash list 

# data transfering  from stash area working tree
# copy past method 

---> git stash apply <stash@{number}>

# cut past method

---> git stash pop <stash@{number}>

# to clean the stash area

---> git stash clean

# addig tags to commits 
# lightweight tag

---> git tag  <tag name>

# annotated tag 

---> git tag -a <tag name > -m <message>

# listing the tags

---> git tag

# view the tag commits

---> git show <tag name>

# pushing tags to remote repository

---> git push <remote branch> <tag name>

# change the commit message

---> git commit --amend 

# to change the author

---> git commit --amend --author='username <emailaddress>'

# rollback the commit

---> git reset -i HEAD~<commit number>

# adding particular commit to the barnch 

---> git cherry-pick <commit-id>





